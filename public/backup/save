const [show, setShow] = useState(false);
  const [ShowButton, setShowButton] = useState(false);
  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);
  const handleShowButton = () => setShowButton(true);
  const handleClose2 = () => setShowButton(false);
  const modalSave = () => {setShowButton(true); setShow(false);}
<div id="editButton"> 
        <ButtonGroup size = "sm" aria-label="edit">
          {ShowButton && <Button onClick={handleClose2} variant="primary">수정</Button>}
          {!ShowButton && <Button onClick={handleShow} type="submit" variant="primary">저장</Button>}
          {!ShowButton && <Button onClick={handleShowButton} variant="outline-secondary">취소</Button>}
        </ButtonGroup>

        <Modal show={show} onHide={handleClose} animation={false}>
          <Modal.Header closeButton>
            <Modal.Title>저장</Modal.Title>
          </Modal.Header>
          <Modal.Body>저장을 하시겠습니까?</Modal.Body>
          <Modal.Footer>
            <Button variant="secondary" onClick={handleClose}>
              취소
            </Button>
            <Button variant="primary" onClick={modalSave}>
              저장
            </Button>
          </Modal.Footer>
        </Modal>
      </div>

      

      {/* <DragDropContext onDragEnd={(param) => {
        
        const src = param.source;
        const dest = param.destination;
        
        if (!dest) {
          return;
      }
        if(src.droppableId === dest.droppableId){          
          if(dest.droppableId === "droppable"){
            name.splice(dest.index,0,name.splice(src.index,1)[0]);
            
          }
          else{
            name2.splice(dest.index,0,name2.splice(src.index,1)[0]);
          }
        }
        else{
          var removed;
          
          if(src.droppableId === "droppable"){
            removed = name.splice(src.index,1);
            removed[0].bus = "red";
            name2.splice(dest.index,0,removed[0]);
            //console.log(name2);
          }
          else{
            removed = name2.splice(src.index,1);
            removed[0].bus = "yellow";
            name.splice(dest.index,0,removed[0]);
            //console.log(name);
          }
          setNum1(name.length);
          setNum2(name2.length);
        };
      }}
      >
      <ul style = {{"fontSize":"10px","border":"1px solid #cacaca", "margin" : "10px 0px 0px 0px", "padding":"5px 0px 5px 5px","borderRadius" : 3,"width" : "300px", "backgroundColor" : "#f1f5fa"}}>
      {!ShowButton &&<FiAlignJustify/> }<span style = {{"fontSize": "14px", "padding": "0px 9px 0px 10px"}}>S</span> <span style ={{"width":150}}>Yellow</span>
      </ul>
      <div style = {{"textAlign":"right"}}>
      
      <span style = {{"margin":"16px 15px 0px 0px","borderRadius":3,"float":"right","paddingRight":"0px","fontSize":"10px"}}><BsPersonFill style = {{"height":"0.8em"}}/><span style = {{"color" : (num1>6) ? "red" : "black"}}>{num1}명</span>/6명</span>
      
      <Droppable droppableId="droppable" isDropDisabled={ShowButton}>
        {(provided, snapshot) => (
          <RootRef rootRef={provided.innerRef}>
            <List style={getListStyle(snapshot.isDraggingOver)}>
              {name.map((item, index) => (
                <Draggable key={item.id} draggableId={item.id} index={index}>
                  {(provided, snapshot) => (
                    
                    <ListItem
                      ContainerComponent="li"
                      ContainerProps={{ ref: provided.innerRef }}
                      {...provided.draggableProps}
                      {...provided.dragHandleProps}
                      style={getItemStyle(
                        snapshot.isDragging,
                        provided.draggableProps.style
                      )}
                    >
                      {!ShowButton && <FiAlignJustify/>}
                      <ListItemText
                        className = "upperText"
                        secondary={item.text}
                      />
                      <ListItemText
                        className = "status"
                        secondaryTypographyProps={item.status === "승차"? {style: text.green} : {style: text.purple}}
                        secondary={item.status}
                      />
                      {!ShowButton && <span onClick={() => onRemove1(item.id)}><AiOutlineMinus
                        style={{"width":10}}
                      /></span>}
                      <ListItemSecondaryAction>

                      </ListItemSecondaryAction>
                    </ListItem>
                  )}
                </Draggable>
              ))}
              {provided.placeholder}

            </List>

              
          </RootRef>
        )}
      </Droppable>
      
      </div>
      <ul style = {{"fontSize":"10px","border":"1px solid #cacaca", "margin" : "0px 0px 0px 0px", "marginTop": num1===0 ? 30:0,"padding":"5px 0px 5px 5px","borderRadius" : 3,"width" : "300px", "backgroundColor" : "#f1f5fa"}}>
      {!ShowButton &&<FiAlignJustify/> }<span style = {{"fontSize": "14px", "padding": "0px 9px 0px 10px"}}>1</span> <span style ={{"marginLeft":0}}>Red</span>
      </ul>
      <span style = {{"margin":"16px 15px 0px 0px","borderRadius":3,"paddingRight":"0px","fontSize":"10px","float" : "right"}}><BsPersonFill style = {{"height":"0.8em"}}/><span style = {{"color" : (num2>6) ? "red" : "black"}}>{num2}명</span>/6명</span>
      
      
      <Droppable droppableId="droppable2" isDropDisabled={ShowButton}>
        {(provided, snapshot) => (
          <RootRef rootRef={provided.innerRef}>
            <List style={getListStyle(snapshot.isDraggingOver)}>
              {name2.map((item, index) => (
                <Draggable key={item.id} draggableId={item.id} index={index} isDragDisabled="true">
                  {(provided, snapshot) => (
                    
                    <ListItem
                      ContainerComponent="li"
                      ContainerProps={{ ref: provided.innerRef }}
                      {...provided.draggableProps}
                      {...provided.dragHandleProps}
                      style={getItemStyle(
                        snapshot.isDragging,
                        provided.draggableProps.style
                      )}
                    >
                      {!ShowButton && <FiAlignJustify/>}
                      <ListItemText 
                        
                        className = "upperText"
                        secondary={item.text}
                      />
                      <ListItemText 
                        className = "status"
                        secondaryTypographyProps={item.status === "승차"? {style: text.green} : {style: text.purple}}
                        secondary={item.status}
                      />
                      {!ShowButton && <span onClick={() => onRemove2(item.id)}><AiOutlineMinus
                        style={{"width":10}}
                      /></span>}
                      <ListItemSecondaryAction>

                      </ListItemSecondaryAction>
                    </ListItem>
                  )}
                </Draggable>
              ))}
              {provided.placeholder}
            </List>
          </RootRef>
        )}
      </Droppable>
    </DragDropContext> */}
